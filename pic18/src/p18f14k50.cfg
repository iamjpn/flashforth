;**********************************************************************
;                                                                     *
;    Filename:      p18f14k50                                         *
;    Date:          07.10.2017                                        *
;    FF Version:    5.0                                               *
;    Copyright:     Mikael Nordman                                    *
;    Author:        Mikael Nordman                                    *
;                                                                     * 
;    Modified:                                                        *
;**********************************************************************
;    FlashForth is licensed acording to the GNU General Public License*
;**********************************************************************
;;; FlashForth processor specific configuration

;;; Define USB_CDC if you want to use USB serial emulation
;;; If you use CDC, you must also compile usbcdc.asm
; #define USB_CDC

; The config directive is used control the processor configuration bits
; See processor specific include file for details.
#if CONFIG_RESET == 0x0000
        config CPUDIV = NOCLKDIV ;48 MHZ ;CLKDIV2     ; 24 MHz cpu clock
        config USBDIV = ON          ; USB clock from 96 MHZ PLL divided by 2
        config FOSC = HS            ; 12 MHz HS Xtal oscillator
        config PLLEN = ON
        config PCLKEN = ON
        config FCMEN = OFF
        config IESO = OFF
        config PWRTEN = ON
        config BOREN = SBORDIS
        config BORV = 30
        config WDTEN = ON
        config WDTPS = 256
        config MCLRE = OFF
        config HFOFST = OFF
        config STVREN = ON
        config LVP = OFF
        config XINST = OFF
        config BBSIZ = ON
        config CP0 = OFF
;        config CP1 = OFF    ; Data sheet is unclear about this bit
        config CPB = OFF
        config WRTC = OFF
#endif
        
;;; Some constants controlling how writes to program flash is made.
        constant flash_write_outer_loop = d'4'
        constant flash_write_inner_loop = d'16'
        constant flash_block_size = flash_write_outer_loop * flash_write_inner_loop
        constant flash_block_mask = flash_block_size - 1;
        constant flash_pointer_mask = ( ~ flash_block_mask ) & h'ff'

;;; Activate 4xPLL from SW
#define PLL DISABLE	         ; ENABLE or DISABLE
