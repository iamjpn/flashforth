;**********************************************************************
;                                                                     *
;    Filename:      p18f2585-2680-4585-4680.cfg                       *
;    Date:          14.06.2011                                        *
;    FF Version:    3.8                                               *
;    Copyright:     Mikael Nordman                                    *
;    Author:        Mikael Nordman                                    *
;                                                                     * 
;    Modified:                                                        *
;**********************************************************************
;    FlashForth is licensed acording to the GNU General Public License*
;**********************************************************************
;;; FlashForth processor specific configuration

; The config directive is used control the processor configuration bits
; See processor specific include file for details.


#if CONFIG_RESET == 0x0000
        config OSC = HS
        config FCMEN = OFF
        config IESO = OFF
        config PWRT = ON
        config BOREN = BOHW
        config BORV = 3
        config WDT = ON
        config WDTPS = 128
        config MCLRE = ON
        config PBADEN = OFF
        config LPT1OSC = OFF
        config STVREN = ON
        config LVP = OFF
        config BBSIZ = 4096 ; How does he boot block size work. Not described in the datasheet.
        config XINST = OFF
        config DEBUG = OFF
        config WRT0 = OFF ; Not needed because of BBSIZ = 4096 ?
        config WRTC = ON
        config WRTB = ON
#endif

;;;  Specify the clock frequency here, XTAL = 12 MHz
        constant clock=d'8000000'

;;; Calculate the program memory write delay
        constant clock_MHZ = clock / d'1000000'
        constant write_delay = (d'255' * clock_MHZ) / d'60'  

;;; Specify RS-232 The baud rate here
        constant baud=d'9600'
        constant spbrgval = ((clock/baud)/d'16') - 1

;;; Some constants controlling how writes to program flash is made.
        constant flash_write_outer_loop = d'1'
        constant flash_write_inner_loop = d'64'
        constant flash_block_size = flash_write_outer_loop * flash_write_inner_loop
        constant flash_block_mask = flash_block_size - 1;
        constant flash_pointer_mask = ( ~ flash_block_mask ) & h'ff'

;;; Start address of the user dictionary
;;; This should be aligned with the program memory protection bits
;;; How does he boot block size work. Not described in the datasheet.
#if CONFIG_RESET == 0
        constant dp_user_dictionary = h'2300'
#else
#if CONFIG_RESET == 0x0800
        constant dp_user_dictionary = h'2B00'
#else
        error "Invalid CONFIG_RESET"
#endif
#endif

;;; Constant for the MS word.
        constant   tmr2prescaler = d'4'
        constant   tmr2postscaler = d'16'
        constant   tmr2ms_val=(clock/d'4000'/tmr2prescaler/tmr2postscaler) 

        constant   tmr1prescaler = d'1'
        constant   tmr1ms_val_lo=(0 - clock/d'4000'/tmr1prescaler)&h'ff' 
        constant   tmr1ms_val_hi=((0 - clock/d'4000'/tmr1prescaler)>>8)&h'ff'


;;; Define which words you want to leave out from the core dictionary
;;; #define SKIP_DUMP
;;; #define SKIP_MULTITASKING

;;; Define SAFE_CHECK1 to enable writechecks
;;; on system variables below h'f060'
#define SAFE_CHECK1


;;; Define which timer is stepping TICKS and MS. Only one can be uncommented.
;;; #define MS_TMR1
;;;  #define MS_TMR2
#define MS_TMR3

;;; Allow warm reset by ctrl-O
#define CTRL_O_WARM_RESET

;;; Define if 8-bit characters should be sent by TX1
;;; Use with HW flow control and without ctrl-O reset for 
;;; full binary character set.
;#define USE_8BIT_ASCII

;;; Storage space for OPERATOR uservariables 2 and upwards
;;; EXAMPLE: 8 user myUserVar  -> define UADDSIZE 8
#define UADDSIZE 0


;;; Flow control defintions ********************************

;;; Use SW flow control XON/XOFF as default
;;; Uncomment to use HW flow control
;#define FC_TYPE_HW

#ifdef FC_TYPE_HW
; Low latency UART in host or HW flow control 
;;; Define the RX1 fill level for CTS off
 constant RX1_OFF_FILL = d'32'

; Clear To Send to the computer, DB9 PIN 8
#define HW_FC_CTS_PORT LATC
#define HW_FC_CTS_TRIS TRISC
#define HW_FC_CTS_PIN  0

;;; Define if also RTS flow control should be included
;;; RTS lets the terminal control if FF is allowed to transmit data
; #define HW_FC_RTS ; Comment out to leave out RTS

; Request To Send from the computer, DB9 PIN 7.
#ifdef HW_FC_RTS
#define HW_FC_RTS_PORT PORTC
#define HW_FC_RTS_TRIS TRISC
#define HW_FC_RTS_PIN  1
#endif  ; HW_FC_RTS

#else   ;
#define FC_TYPE_SW
;;; Define the RX1 fill level for XOFF
;;; Mainly useful for SW flow control
;;; RX1 interrupt buffer size is 64 characters.

; High latency UART in host
; LINUX : setserial /dev/ttySx ^low_latency
        constant RX1_OFF_FILL = d'5'

; Low latency UART in host or HW flow control  
; LINUX : setserial /dev/ttySx low_latency
;       constant RX1_OFF_FILL = d'32'

#endif
